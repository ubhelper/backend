openapi: 3.0.0
info:
  title: node - it-wizard-backend
  description: 
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: http://localhost:5100
    description: Back-End API 서버
tags:
  - name: user
    description: 사용자에 대한 처리
    externalDocs:

paths:
  /user/signUp:
    post:
      tags:
        - user
      summary: 회원 가입
      description: 회원의 정보를 입력 받아서 회원 가입을 한다.
      requestBody:
        description: 회원 정보 입력
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
        required: true
      responses:
        200: # status code
          description: 성공 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        409:
          description: Conflict
          content: {}
        500:
          description: Internal Server Error
          content: {}

  /user/login:
    post:
      tags:
        - user
      summary: 로그인
      description: 회원의 정보를 입력 받아서 로그인 처리를 한다.
      requestBody:
        description: 회원 정보 입력
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        200:    # status code
          description: JWT 토큰을 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InVzZX
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /user/info:
    get:
      tags:
        - user
      summary: 사용자 정보 조회
      description: 사용자 정보를 조회한다.
      security:
        - jwt: []
      responses:
        200: # status code
          description: 사용자 정보 조회 object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        500:
          description: Internal Server Error
          content: {}
    put:
      tags:
        - user
      summary: 사용자 정보 수정
      description: 사용자 정보를 수정한다.
      requestBody:
        description: 수정할 정보 입력
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      security:
        - jwt: [ ]
      responses:
        200: # status code
          description: 성공 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }
    delete:
      tags:
        - user
      summary: 사용자 정보 삭제
      description: 사용자 정보를 삭제한다.
      security:
        - jwt: [ ]
      responses:
        200: # status code
          description: 성공 메시지
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        401:
          description: Unauthorized
          content: { }
        500:
          description: Internal Server Error
          content: { }

components:
  schemas:
    SignUp:
      type: object
      properties:
        user_id:
          type: string
          example: USER_1ST
        password:
          type: string
          example: Rnfehowl
        user_name:
          type: string
          example: 하우머치
    Login:
      type: object
      properties:
        user_id:
          type: string
          example: USER_1ST
        password:
          type: string
          example: Rnfehowl
    UserInfo:
      type: object
      properties:
        data:
          type: object
          properties:
            user_id:
              type: string
              example: USER_1ST
            user_name:
              type: string
              example: 투머치
    UserUpdate:
      type: object
      properties:
        password:
          type: string
          example: Ehdehowl
        user_name:
          type: string
          example: 나이스가이

  securitySchemes:
    jwt:
      type: http
      name: jwt
      scheme: bearer
      in: header
